---
pid_filename: /var/vcap/sys/run/rotate_cc_database_key/rotate_cc_database_key.pid

index: <%= spec.index %>
name: <%= name %>

logging:
  file: /var/vcap/sys/log/rotate_cc_database_key/rotate_cc_database_key.log
  syslog: vcap.cloud_controller_ng
  level: "<%= p("cc.logging_level") %>"
  max_retries: <%= p("cc.logging_max_retries") %>

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
db: &db
  database: "<%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>://<%= db_role["name"] %>:<%= URI.escape(db_role["password"]) %>@<%= database_address %>:<%= p("ccdb.port") %>/<%= db["name"] %>"
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: "<%= p("cc.db_logging_level") %>"
  log_db_queries: <%= p("cc.log_db_queries") %>
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
  read_timeout: <%= p("ccdb.read_timeout") %>
  connection_validation_timeout: <%= p("ccdb.connection_validation_timeout") %>
<% if_p('ccdb.ca_cert') do %>
  ca_cert_path: '/var/vcap/jobs/rotate_cc_database_key/config/certs/db_ca.crt'
<% end %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

<% if link("cloud_controller_internal").p("cc.database_encryption") %>
database_encryption:
  keys: <%= link("cloud_controller_internal").p("cc.database_encryption.keys", {}).to_json %>
  current_key_label: <%= link("cloud_controller_internal").p("cc.database_encryption.current_key_label").inspect %>
<% end %>
